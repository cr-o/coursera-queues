See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 3 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (1 warning)
Checkstyle:   PASSED

Correctness:  16/43 tests passed
Memory:       123/125 tests passed
Timing:       80/193 tests passed

Aggregate score: 50.46%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.9K Nov  9 00:12 Deque.java
 680 Nov  9 00:12 Permutation.java
3.7K Nov  9 00:12 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Deque.java
*-----------------------------------------------------------

% javac11 RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:17: warning: [unchecked] unchecked cast
        randomizedQueue = (Item[]) new Object[1];
                                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:46: warning: [unchecked] unchecked cast
        Item[] newQueue = (Item[]) new Object[randomizedQueue.length * 2];
                                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:54: warning: [unchecked] unchecked cast
        Item[] newQueue = (Item[]) new Object[randomizedQueue.length / 2];
                                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

% javac11 Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
Deque.java:37: Avoid unused local variables, such as 'item'. [UnusedLocalVariable]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------
[INFO] Deque.java:38: Using a loop in this method might be a performance bug. [Performance]

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
    - failed on operation 1 of 500
    - student   size() = 1
    - reference size() = 0
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.size()            ==> 1

  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> FAILED

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test2(TestDeque.java:455)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()

  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 1 of 500
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test2(TestDeque.java:459)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.isEmpty()         ==> false
         deque.removeFirst()

  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 1 of 50
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test2(TestDeque.java:461)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.addFirst(2)
         deque.removeFirst()     ==> 2
         deque.removeFirst()

  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 1 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

==> FAILED

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 1 of 5
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 1 of 5
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 1 of 50
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:477)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 1 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

==> FAILED

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test4(TestDeque.java:488)
    TestDeque.main(TestDeque.java:852)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeLast()

  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test4(TestDeque.java:490)
    TestDeque.main(TestDeque.java:852)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeLast()

  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 1 of 5
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 1 of 50
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 1 of 500
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 1 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

==> FAILED

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 1 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 1 of 5
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:508)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeFirst()

  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:509)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeFirst()

  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 1 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

==> FAILED

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 1 of 5
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 1 of 50
    - student   size() = 1
    - reference size() = 0
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.size()            ==> 1

  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test6(TestDeque.java:523)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.isEmpty()         ==> false
         deque.removeFirst()

  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test6(TestDeque.java:525)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.removeFirst()     ==> 1
         deque.removeFirst()

  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test6(TestDeque.java:526)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 1 of 500
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> false

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test6(TestDeque.java:528)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
    - removeFirst() throws wrong exception when deque is empty
    - throws a java.lang.NullPointerException
    - should throw a java.util.NoSuchElementException

  * removeLast()
    - removeLast() throws wrong exception when deque is empty
    - throws a java.lang.NullPointerException
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 8: check whether two Deque objects can be created at the same time
  * n = 10

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.checkTwoDequeObjects(TestDeque.java:192)
    TestDeque.test8(TestDeque.java:590)
    TestDeque.main(TestDeque.java:856)

  * n = 1000

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.checkTwoDequeObjects(TestDeque.java:192)
    TestDeque.test8(TestDeque.java:591)
    TestDeque.main(TestDeque.java:856)

==> FAILED

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TestDeque.checkIteratorAfterIntermixedOperations(TestDeque.java:260)
    TestDeque.test10(TestDeque.java:627)
    TestDeque.main(TestDeque.java:858)

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.addFirst(2)
         deque.addLast(3)
         deque.removeFirst()   ==> 2
         deque.removeFirst()   ==> 1
         deque.addLast(6)
         deque.removeLast()    ==> 6
         deque.removeLast()

  * m = 50
  * m = 100

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TestDeque.checkIteratorAfterIntermixedOperations(TestDeque.java:260)
    TestDeque.test10(TestDeque.java:629)
    TestDeque.main(TestDeque.java:858)

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)
         deque.removeLast()

  * m = 1000

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.checkIteratorAfterIntermixedOperations(TestDeque.java:244)
    TestDeque.test10(TestDeque.java:630)
    TestDeque.main(TestDeque.java:858)

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create Deque objects of different parameterized types

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TestDeque.test13(TestDeque.java:661)
    TestDeque.main(TestDeque.java:861)

==> FAILED

Test 14: call addFirst() and addLast() with null argument
==> passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: call iterator() when the deque is empty
==> passed


Total: 6/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
    - dequeue() throws wrong exception when queue is empty
    - throws a java.lang.IllegalArgumentException
    - should throw a java.util.NoSuchElementException

  * sample()
    - sample() throws wrong exception when queue is empty
    - throws a java.lang.IllegalArgumentException
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * n = 50


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10

    java.util.NoSuchElementException: No more elements to return

    RandomizedQueue$ListIterator.hasNext(RandomizedQueue.java:90)
    SafeIterable$SafeIterator.hasNext(SafeIterable.java:54)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:903)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:921)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1209)

  * m = 1000


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in StdRandom exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    - inner iterator returned more than 10 items

  * n = 50
    - inner iterator returned more than 50 items

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false

  * n = 50
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false

==> FAILED

Test 11: create two iterators over different randomized queues


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

  * n = 3, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

  * n = 4, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

  * n = 5, trials = 12000
    - iterator() returns the same item more than once
    - but no duplicate items were added to randomized queue
    - failed on operation 1 of 12000

==> FAILED

Test 16: call enqueue() with a null argument
    - fails to throw an exception when calling enqueue() with a null argument

==> FAILED

Test 17: check that remove() and next() throw the specified exceptions in iterator()
    - fails to throw an exception when calling next() when iterator is exhausted
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 18: call iterator() when randomized queue is empty

    java.util.NoSuchElementException: No more elements to return

    RandomizedQueue$ListIterator.hasNext(RandomizedQueue.java:90)
    TestRandomizedQueue.test18(TestRandomizedQueue.java:1159)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1239)

==> FAILED


Total: 8/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  H
  A
  E
  C

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 4
  - lines of output in reference solution = 3

  % java Permutation 3 < distinct.txt
  D
  A
  I
  B

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 4
  - lines of output in reference solution = 3

  % java Permutation 8 < duplicates.txt
  BB
  CC
  BB
  BB
  AA
  BB
  BB
  CC


    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    TestPermutation.checkFormatting(TestPermutation.java:40)
    TestPermutation.test1a(TestPermutation.java:208)
    TestPermutation.main(TestPermutation.java:316)

  - student solution threw an exception
  - reference solution did not throw an exception

==> FAILED

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  it
  it
  the
  times
  it
  foolishness
  age
  of
  of

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 9
  - lines of output in reference solution = 8

  % java Permutation 0 < distinct.txt
  E

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 1
  - lines of output in reference solution = 0

==> FAILED

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    UtilCOS.consumesStdIn(UtilCOS.java:189)
    TestPermutation.checkConsumesStdIn(TestPermutation.java:52)
    TestPermutation.test2(TestPermutation.java:223)
    TestPermutation.main(TestPermutation.java:322)

  * filename = mediumTale.txt, k = 8
==> FAILED

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:234)
    TestPermutation.main(TestPermutation.java:325)

  * filename = permutation6.txt, k = 6

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:235)
    TestPermutation.main(TestPermutation.java:325)

  * filename = permutation10.txt, k = 10

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3a(TestPermutation.java:236)
    TestPermutation.main(TestPermutation.java:325)

==> FAILED

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TestPermutation.checkStringFrequencies(TestPermutation.java:74)
    TestPermutation.test3b(TestPermutation.java:244)
    TestPermutation.main(TestPermutation.java:328)

  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> FAILED

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
    - student prints an invalid permutation:
      A D
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 2
    - student prints an invalid permutation:
      A D C
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 3
    - student prints an invalid permutation:
      D B C A
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 4

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TestPermutation.checkRandomnessOfPermutation(TestPermutation.java:161)
    TestPermutation.test5a(TestPermutation.java:281)
    TestPermutation.main(TestPermutation.java:337)

  * filename = permutation6.txt, k = 2
    - student prints an invalid permutation:
      F A C
    - failed on trial 1 of 1000

==> FAILED

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
    - student prints an invalid permutation:
      B A
    - failed on trial 1 of 1000

  * filename = permutation5.txt, k = 2
    - student prints an invalid permutation:
      A A A
    - failed on trial 1 of 1000

  * filename = permutation5.txt, k = 3
    - student prints an invalid permutation:
      A B A B
    - failed on trial 1 of 1000

  * filename = duplicates.txt, k = 3
    - student prints an invalid permutation:
      BB BB BB CC
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 2
    - student prints an invalid permutation:
      D C D
    - failed on trial 1 of 1000

==> FAILED

Total: 2/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TimePermutation.countCallsToStdIn(TimePermutation.java:61)
    TimePermutation.test1(TimePermutation.java:304)
    TimePermutation.main(TimePermutation.java:358)

  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> FAILED

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TimePermutation.countCallsToDequeAndRandomizedQueue(TimePermutation.java:140)
    TimePermutation.test2(TimePermutation.java:315)
    TimePermutation.main(TimePermutation.java:361)

  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> FAILED

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TimePermutation.countCallsToStdRandom(TimePermutation.java:225)
    TimePermutation.test3(TimePermutation.java:326)
    TimePermutation.main(TimePermutation.java:364)

  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> FAILED

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.03
=> passed      128000     0.05
=> passed      256000     0.08
=> passed      512000     0.16
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------

    java.util.NoSuchElementException: randomized queue underflow

    RandomizedQueue.dequeue(RandomizedQueue.java:142)
    Permutation.main(Permutation.java:15)
    UtilCOS.execute(UtilCOS.java:159)
    UtilCOS.execute(UtilCOS.java:146)
    TimePermutation.timeMain(TimePermutation.java:265)
    TimePermutation.checkRunningTimeOfMain(TimePermutation.java:284)
    TimePermutation.test5(TimePermutation.java:341)
    TimePermutation.main(TimePermutation.java:370)

=> FAILED        1000 Infinity
   [ Most likely main() takes more than linear time. ]
==> 0/10 tests passed


Total: 10/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 48 total tests.

Test 1a-1i: total memory usage after inserting n items,
            where n is a power of 2

                 n        bytes
----------------------------------------------------------
=> passed       32         1568
=> passed       64         3104
=> passed      128         6176
=> passed      256        12320
=> passed      512        24608
=> passed     1024        49184
=> passed     2048        98336
=> passed     4096       196640
=> passed     8192       393248
==> 9/9 tests passed

Memory: 48.00 n + 32.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1616
=> passed       65         3152
=> passed      129         6224
=> passed      257        12368
=> passed      513        24656
=> passed     1025        49232
=> passed     2049        98384
=> passed     4097       196688
=> passed     8193       393296
==> 9/9 tests passed

Memory: 48.00 n + 32.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1616
=> passed       65         3152
=> passed      129         6224
=> passed      257        12368
=> passed      513        24656
=> passed     1025        49232
=> passed     2049        98384
=> passed     4097       196688
=> passed     8193       393296
==> 9/9 tests passed

Memory: 48.00 n + 32.00   (R^2 = 1.000)


Test 4a-4e: Total memory usage after inserting n items,
            and then deleting all but one item
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> passed       32           80
=> passed       64           80
=> passed      128           80
=> passed      256           80
=> passed      512           80
=> passed     1024           80
=> passed     2048           80
=> passed     4096           80
=> passed     8192           80
==> 9/9 tests passed

Memory: 80.00   (R^2 = 1.000)


Test 5a-5e: Total memory usage of iterator after inserting n items
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> passed       32           32
=> passed       64           32
=> passed      128           32
=> passed      256           32
=> passed      512           32
=> passed     1024           32
=> passed     2048           32
=> passed     4096           32
=> passed     8192           32
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively.
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:371)
    MemoryOfDeque.test6a(MemoryOfDeque.java:422)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:372)
    MemoryOfDeque.test6a(MemoryOfDeque.java:423)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:371)
    MemoryOfDeque.test6a(MemoryOfDeque.java:424)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:372)
    MemoryOfDeque.test6a(MemoryOfDeque.java:425)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:372)
    MemoryOfDeque.test6a(MemoryOfDeque.java:426)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    MemoryOfDeque.loiter(MemoryOfDeque.java:468)
    MemoryOfDeque.test6b(MemoryOfDeque.java:539)
    MemoryOfDeque.main(MemoryOfDeque.java:656)

    - sequence of operations was:
         deque.addFirst("OTUTBVKCTZ")
         deque.addFirst("WOUPAVDSHG")
         deque.removeFirst()     ==> WOUPAVDSHG
         deque.removeFirst()

  * 100 random operations (0.8, 0.0, 0.0, 0.2)
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
  * 100 random operations (0.0, 0.8, 0.0, 0.2)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    MemoryOfDeque.loiter(MemoryOfDeque.java:481)
    MemoryOfDeque.test6b(MemoryOfDeque.java:542)
    MemoryOfDeque.main(MemoryOfDeque.java:656)

    - sequence of operations was:
         deque.addLast("LHIVBDJUMD")
         deque.removeLast()

  * 100 random operations (0.4, 0.4, 0.1, 0.1)
  * 100 random operations (0.2, 0.2, 0.3, 0.3)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    MemoryOfDeque.loiter(MemoryOfDeque.java:481)
    MemoryOfDeque.test6b(MemoryOfDeque.java:544)
    MemoryOfDeque.main(MemoryOfDeque.java:656)

    - sequence of operations was:
         deque.addFirst("TYKQHBGYJI")
         deque.removeLast()

==> FAILED

Test 7: worst-case constant memory allocated or de-allocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed


Min observed memory for Deque: 48.00 n + 32.00   (R^2 = 1.000)
Max observed memory for Deque: 48.00 n + 32.00   (R^2 = 1.000)

Total: 46/48 tests passed!


================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          312
=> passed       64          568
=> passed      128         1080
=> passed      256         2104
=> passed      512         4152
=> passed     1024         8248
=> passed     2048        16440
=> passed     4096        32824
=> passed     8192        65592
==> 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          568
=> passed       65         1080
=> passed      129         2104
=> passed      257         4152
=> passed      513         8248
=> passed     1025        16440
=> passed     2049        32824
=> passed     4097        65592
=> passed     8193       131128
==> 9/9 tests passed

Memory: 16.00 n + 40.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1080
=> passed       65         2104
=> passed      129         4152
=> passed      257         8248
=> passed      513        16440
=> passed     1025        32824
=> passed     2049        65592
=> passed     4097       131128
=> passed     8193       262200
==> 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          312
=> passed       64          568
=> passed      128         1080
=> passed      256         2104
=> passed      512         4152
=> passed     1024         8248
=> passed     2048        16440
=> passed     4096        32824
=> passed     8192        65592
==> 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> passed       32           88
=> passed       64           88
=> passed      128           88
=> passed      256           88
=> passed      512           88
=> passed     1024           88
=> passed     2048           88
=> passed     4096           88
=> passed     8192           88
==> 9/9 tests passed

Memory: 88.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32           32
=> passed       64           32
=> passed      128           32
=> passed      256           32
=> passed      512           32
=> passed     1024           32
=> passed     2048           32
=> passed     4096           32
=> passed     8192           32
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==> passed

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=> passed        8          120
=> passed       16          184
=> passed       32          312
=> passed       64          568
=> passed      128         1080
=> passed      256         2104
=> passed      512         4152
=> passed     1024         8248
=> passed     2048        16440
==> 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
=> passed     2048        65592
=> passed     1024        32824
=> passed      512        16440
=> passed      256         8248
=> passed      128         4152
=> passed       64         2104
=> passed       32         1080
=> passed       16          568
=> passed        8          312
==> 9/9 tests passed

Memory: 32.00 n + 56.00   (R^2 = 1.000)


Min observed memory for RandomizedQueue: 8.00 n + 56.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 32.00 n + 24.00   (R^2 = 1.000)

Running 75 total tests.

Total: 75/75 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 103 total tests.

Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test1(TimeDeque.java:220)
    TimeDeque.main(TimeDeque.java:366)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 2a-2k: make n calls to addLast() followed by n calls to removeLast()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test2(TimeDeque.java:226)
    TimeDeque.main(TimeDeque.java:369)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test3(TimeDeque.java:232)
    TimeDeque.main(TimeDeque.java:372)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test4(TimeDeque.java:238)
    TimeDeque.main(TimeDeque.java:375)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.01
=> passed        8192     0.06

    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:91)
    TimeDeque.timeRandomOperations(TimeDeque.java:98)
    TimeDeque.timeRandomOperations(TimeDeque.java:192)
    TimeDeque.test5(TimeDeque.java:251)
    TimeDeque.main(TimeDeque.java:378)

=> FAILED       16384   Test did not complete due to an exception.

==> 4/12 tests passed


Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.01

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TimeDeque.timeRandomOperations(TimeDeque.java:107)
    TimeDeque.timeRandomOperations(TimeDeque.java:192)
    TimeDeque.test6(TimeDeque.java:264)
    TimeDeque.main(TimeDeque.java:381)

=> FAILED        8192   Test did not complete due to an exception.

==> 3/12 tests passed


Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:103)
    TimeDeque.timeRandomOperations(TimeDeque.java:107)
    TimeDeque.timeRandomOperations(TimeDeque.java:191)
    TimeDeque.test7(TimeDeque.java:277)
    TimeDeque.main(TimeDeque.java:384)

=> FAILED        1024   Test did not complete due to an exception.

==> 0/12 tests passed


Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.02
=> passed        8192     0.08
=> passed       16384     0.32
=> FAILED       32768     1.37
   [ Most likely one of your operations is not constant time. ]

==> 5/12 tests passed


Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst(), removeLast(), addFirst(), and addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.01
=> passed        2049     0.06
=> passed        4097     0.26
=> FAILED        8193     1.08
   [ Most likely one of your operations is not constant time. ]

==> 3/11 tests passed

Total: 15/103 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 67 total tests.

Test 1: make n calls to enqueue() followed by n calls to dequeue();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 2: make n calls to enqueue() follwed by n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue() and iterate over the n items;
        count calls to StdRandom
  * n = 10


        :::::::

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
